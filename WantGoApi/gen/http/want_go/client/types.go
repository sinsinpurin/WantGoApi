// Code generated by goa v3.0.10, DO NOT EDIT.
//
// WantGo HTTP client types
//
// Command:
// $ goa gen WantGoApi/design

package client

import (
	wantgo "WantGoApi/gen/want_go"
)

// GetSimpleCardListResponseBody is the type of the "WantGo" service
// "getSimpleCardList" endpoint HTTP response body.
type GetSimpleCardListResponseBody []*SimpleCardResponse

// GetCardInfoResponseBody is the type of the "WantGo" service "getCardInfo"
// endpoint HTTP response body.
type GetCardInfoResponseBody struct {
	CardAuthor      *string  `form:"cardAuthor,omitempty" json:"cardAuthor,omitempty" xml:"cardAuthor,omitempty"`
	CardTitle       *string  `form:"cardTitle,omitempty" json:"cardTitle,omitempty" xml:"cardTitle,omitempty"`
	CardDescription *string  `form:"cardDescription,omitempty" json:"cardDescription,omitempty" xml:"cardDescription,omitempty"`
	Tags            []string `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
	ImageURL        *string  `form:"imageUrl,omitempty" json:"imageUrl,omitempty" xml:"imageUrl,omitempty"`
	LocationAddress *string  `form:"locationAddress,omitempty" json:"locationAddress,omitempty" xml:"locationAddress,omitempty"`
	LocationURL     *string  `form:"locationUrl,omitempty" json:"locationUrl,omitempty" xml:"locationUrl,omitempty"`
}

// SimpleCardResponse is used to define fields on response body types.
type SimpleCardResponse struct {
	CardID     *int    `form:"cardId,omitempty" json:"cardId,omitempty" xml:"cardId,omitempty"`
	CardAuthor *string `form:"cardAuthor,omitempty" json:"cardAuthor,omitempty" xml:"cardAuthor,omitempty"`
	CardTitle  *string `form:"cardTitle,omitempty" json:"cardTitle,omitempty" xml:"cardTitle,omitempty"`
	ImageURL   *string `form:"imageUrl,omitempty" json:"imageUrl,omitempty" xml:"imageUrl,omitempty"`
}

// NewGetSimpleCardListSimpleCardNoContent builds a "WantGo" service
// "getSimpleCardList" endpoint result from a HTTP "NoContent" response.
func NewGetSimpleCardListSimpleCardNoContent(body []*SimpleCardResponse) []*wantgo.SimpleCard {
	v := make([]*wantgo.SimpleCard, len(body))
	for i, val := range body {
		v[i] = &wantgo.SimpleCard{
			CardID:     val.CardID,
			CardAuthor: val.CardAuthor,
			CardTitle:  val.CardTitle,
			ImageURL:   val.ImageURL,
		}
	}
	return v
}

// NewGetCardInfoCardInfoOK builds a "WantGo" service "getCardInfo" endpoint
// result from a HTTP "OK" response.
func NewGetCardInfoCardInfoOK(body *GetCardInfoResponseBody) *wantgo.CardInfo {
	v := &wantgo.CardInfo{
		CardAuthor:      body.CardAuthor,
		CardTitle:       body.CardTitle,
		CardDescription: body.CardDescription,
		ImageURL:        body.ImageURL,
		LocationAddress: body.LocationAddress,
		LocationURL:     body.LocationURL,
	}
	if body.Tags != nil {
		v.Tags = make([]string, len(body.Tags))
		for i, val := range body.Tags {
			v.Tags[i] = val
		}
	}
	return v
}
