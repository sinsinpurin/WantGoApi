// Code generated by goa v3.0.10, DO NOT EDIT.
//
// WantGo HTTP client CLI support package
//
// Command:
// $ goa gen WantGoApi/design

package client

import (
	wantgo "WantGoApi/gen/want_go"
	"fmt"
	"strconv"
)

// BuildGetCardInfoPayload builds the payload for the WantGo getCardInfo
// endpoint from CLI flags.
func BuildGetCardInfoPayload(wantGoGetCardInfoCardID string) (*wantgo.GetCardInfoPayload, error) {
	var cardID string
	{
		cardID = wantGoGetCardInfoCardID
	}
	payload := &wantgo.GetCardInfoPayload{
		CardID: cardID,
	}
	return payload, nil
}

// BuildPostCardInfoPayload builds the payload for the WantGo postCardInfo
// endpoint from CLI flags.
func BuildPostCardInfoPayload(wantGoPostCardInfoBody string, wantGoPostCardInfoCardID string) (*wantgo.PostCardInfoPayload, error) {
	var err error
	var body string
	{
		body = wantGoPostCardInfoBody
	}
	var cardID int
	{
		var v int64
		v, err = strconv.ParseInt(wantGoPostCardInfoCardID, 10, 64)
		cardID = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for cardID, must be INT")
		}
	}
	v := body
	res := &wantgo.PostCardInfoPayload{
		CardAuthor: v,
	}
	res.CardID = cardID
	return res, nil
}

// BuildPutCardInfoPayload builds the payload for the WantGo putCardInfo
// endpoint from CLI flags.
func BuildPutCardInfoPayload(wantGoPutCardInfoBody string, wantGoPutCardInfoCardID string) (*wantgo.PutCardInfoPayload, error) {
	var err error
	var body string
	{
		body = wantGoPutCardInfoBody
	}
	var cardID int
	{
		var v int64
		v, err = strconv.ParseInt(wantGoPutCardInfoCardID, 10, 64)
		cardID = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for cardID, must be INT")
		}
	}
	v := body
	res := &wantgo.PutCardInfoPayload{
		CardAuthor: v,
	}
	res.CardID = cardID
	return res, nil
}

// BuildDeleteCardInfoPayload builds the payload for the WantGo deleteCardInfo
// endpoint from CLI flags.
func BuildDeleteCardInfoPayload(wantGoDeleteCardInfoCardID string) (*wantgo.DeleteCardInfoPayload, error) {
	var err error
	var cardID int
	{
		var v int64
		v, err = strconv.ParseInt(wantGoDeleteCardInfoCardID, 10, 64)
		cardID = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for cardID, must be INT")
		}
	}
	payload := &wantgo.DeleteCardInfoPayload{
		CardID: cardID,
	}
	return payload, nil
}
