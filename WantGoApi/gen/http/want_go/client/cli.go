// Code generated by goa v3.0.10, DO NOT EDIT.
//
// WantGo HTTP client CLI support package
//
// Command:
// $ goa gen WantGoApi/design

package client

import (
	wantgo "WantGoApi/gen/want_go"
	"encoding/json"
	"fmt"
	"strconv"

	goa "goa.design/goa/v3/pkg"
)

// BuildGetCardInfoPayload builds the payload for the WantGo getCardInfo
// endpoint from CLI flags.
func BuildGetCardInfoPayload(wantGoGetCardInfoCardID string) (*wantgo.GetCardInfoPayload, error) {
	var cardID string
	{
		cardID = wantGoGetCardInfoCardID
	}
	payload := &wantgo.GetCardInfoPayload{
		CardID: cardID,
	}
	return payload, nil
}

// BuildPostCardInfoPayload builds the payload for the WantGo postCardInfo
// endpoint from CLI flags.
func BuildPostCardInfoPayload(wantGoPostCardInfoBody string) (*wantgo.PostCardInfoPayload, error) {
	var err error
	var body PostCardInfoRequestBody
	{
		err = json.Unmarshal([]byte(wantGoPostCardInfoBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"cardAuthor\": \"Quia similique et cupiditate labore repudiandae.\",\n      \"cardDescription\": \"Velit est.\",\n      \"cardTitle\": \"Et enim.\",\n      \"imageUrl\": \"Saepe quaerat.\",\n      \"locationAddress\": \"Eos minima ab sit.\",\n      \"locationUrl\": \"Maxime sint impedit omnis.\",\n      \"tags\": [\n         \"Vel voluptatem.\",\n         \"Dolore nemo non.\",\n         \"Quas non inventore voluptas neque praesentium.\"\n      ]\n   }'")
		}
		if body.Tags == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("tags", "body"))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &wantgo.PostCardInfoPayload{
		CardAuthor:      body.CardAuthor,
		CardTitle:       body.CardTitle,
		CardDescription: body.CardDescription,
		ImageURL:        body.ImageURL,
		LocationAddress: body.LocationAddress,
		LocationURL:     body.LocationURL,
	}
	if body.Tags != nil {
		v.Tags = make([]string, len(body.Tags))
		for i, val := range body.Tags {
			v.Tags[i] = val
		}
	}
	return v, nil
}

// BuildPutCardInfoPayload builds the payload for the WantGo putCardInfo
// endpoint from CLI flags.
func BuildPutCardInfoPayload(wantGoPutCardInfoBody string, wantGoPutCardInfoCardID string) (*wantgo.PutCardInfoPayload, error) {
	var err error
	var body PutCardInfoRequestBody
	{
		err = json.Unmarshal([]byte(wantGoPutCardInfoBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"cardAuthor\": \"Vel nihil est earum.\",\n      \"cardDescription\": \"Esse non rem asperiores dolore omnis voluptas.\",\n      \"cardTitle\": \"Dignissimos qui.\",\n      \"imageUrl\": \"Et quisquam autem reiciendis at numquam.\",\n      \"locationAddress\": \"Aliquid corporis eaque voluptate vero libero qui.\",\n      \"locationUrl\": \"Repudiandae earum quis dolorem quo eos.\",\n      \"tags\": [\n         \"Est consequatur hic et.\",\n         \"Temporibus eum qui nobis odio officia aut.\",\n         \"Asperiores qui id et consequatur id.\",\n         \"Ratione non voluptatem molestiae.\"\n      ]\n   }'")
		}
		if body.Tags == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("tags", "body"))
		}
		if err != nil {
			return nil, err
		}
	}
	var cardID string
	{
		cardID = wantGoPutCardInfoCardID
	}
	v := &wantgo.PutCardInfoPayload{
		CardAuthor:      body.CardAuthor,
		CardTitle:       body.CardTitle,
		CardDescription: body.CardDescription,
		ImageURL:        body.ImageURL,
		LocationAddress: body.LocationAddress,
		LocationURL:     body.LocationURL,
	}
	if body.Tags != nil {
		v.Tags = make([]string, len(body.Tags))
		for i, val := range body.Tags {
			v.Tags[i] = val
		}
	}
	v.CardID = cardID
	return v, nil
}

// BuildDeleteCardInfoPayload builds the payload for the WantGo deleteCardInfo
// endpoint from CLI flags.
func BuildDeleteCardInfoPayload(wantGoDeleteCardInfoCardID string) (*wantgo.DeleteCardInfoPayload, error) {
	var err error
	var cardID int
	{
		var v int64
		v, err = strconv.ParseInt(wantGoDeleteCardInfoCardID, 10, 64)
		cardID = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for cardID, must be INT")
		}
	}
	payload := &wantgo.DeleteCardInfoPayload{
		CardID: cardID,
	}
	return payload, nil
}
