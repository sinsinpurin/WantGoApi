// Code generated by goa v3.2.6, DO NOT EDIT.
//
// WantGo HTTP server types
//
// Command:
// $ goa gen WantGoApi/design

package server

import (
	wantgo "WantGoApi/gen/want_go"

	goa "goa.design/goa/v3/pkg"
)

// PostCardInfoRequestBody is the type of the "WantGo" service "postCardInfo"
// endpoint HTTP request body.
type PostCardInfoRequestBody struct {
	CardAuthor      *string  `form:"cardAuthor,omitempty" json:"cardAuthor,omitempty" xml:"cardAuthor,omitempty"`
	CardTitle       *string  `form:"cardTitle,omitempty" json:"cardTitle,omitempty" xml:"cardTitle,omitempty"`
	CardDescription *string  `form:"cardDescription,omitempty" json:"cardDescription,omitempty" xml:"cardDescription,omitempty"`
	Tags            []string `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
	ImageURL        *string  `form:"imageUrl,omitempty" json:"imageUrl,omitempty" xml:"imageUrl,omitempty"`
	LocationAddress *string  `form:"locationAddress,omitempty" json:"locationAddress,omitempty" xml:"locationAddress,omitempty"`
	LocationURL     *string  `form:"locationUrl,omitempty" json:"locationUrl,omitempty" xml:"locationUrl,omitempty"`
}

// PutCardInfoRequestBody is the type of the "WantGo" service "putCardInfo"
// endpoint HTTP request body.
type PutCardInfoRequestBody struct {
	CardAuthor      *string  `form:"cardAuthor,omitempty" json:"cardAuthor,omitempty" xml:"cardAuthor,omitempty"`
	CardTitle       *string  `form:"cardTitle,omitempty" json:"cardTitle,omitempty" xml:"cardTitle,omitempty"`
	CardDescription *string  `form:"cardDescription,omitempty" json:"cardDescription,omitempty" xml:"cardDescription,omitempty"`
	Tags            []string `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
	ImageURL        *string  `form:"imageUrl,omitempty" json:"imageUrl,omitempty" xml:"imageUrl,omitempty"`
	LocationAddress *string  `form:"locationAddress,omitempty" json:"locationAddress,omitempty" xml:"locationAddress,omitempty"`
	LocationURL     *string  `form:"locationUrl,omitempty" json:"locationUrl,omitempty" xml:"locationUrl,omitempty"`
}

// GetSimpleCardListResponseBody is the type of the "WantGo" service
// "getSimpleCardList" endpoint HTTP response body.
type GetSimpleCardListResponseBody []*SimpleCardResponse

// GetCardInfoResponseBody is the type of the "WantGo" service "getCardInfo"
// endpoint HTTP response body.
type GetCardInfoResponseBody struct {
	CardAuthor      string   `form:"cardAuthor" json:"cardAuthor" xml:"cardAuthor"`
	CardTitle       string   `form:"cardTitle" json:"cardTitle" xml:"cardTitle"`
	CardDescription string   `form:"cardDescription" json:"cardDescription" xml:"cardDescription"`
	Tags            []string `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
	ImageURL        string   `form:"imageUrl" json:"imageUrl" xml:"imageUrl"`
	LocationAddress string   `form:"locationAddress" json:"locationAddress" xml:"locationAddress"`
	LocationURL     string   `form:"locationUrl" json:"locationUrl" xml:"locationUrl"`
}

// SimpleCardResponse is used to define fields on response body types.
type SimpleCardResponse struct {
	CardID     int    `form:"cardId" json:"cardId" xml:"cardId"`
	CardAuthor string `form:"cardAuthor" json:"cardAuthor" xml:"cardAuthor"`
	CardTitle  string `form:"cardTitle" json:"cardTitle" xml:"cardTitle"`
	ImageURL   string `form:"imageUrl" json:"imageUrl" xml:"imageUrl"`
}

// NewGetSimpleCardListResponseBody builds the HTTP response body from the
// result of the "getSimpleCardList" endpoint of the "WantGo" service.
func NewGetSimpleCardListResponseBody(res []*wantgo.SimpleCard) GetSimpleCardListResponseBody {
	body := make([]*SimpleCardResponse, len(res))
	for i, val := range res {
		body[i] = marshalWantgoSimpleCardToSimpleCardResponse(val)
	}
	return body
}

// NewGetCardInfoResponseBody builds the HTTP response body from the result of
// the "getCardInfo" endpoint of the "WantGo" service.
func NewGetCardInfoResponseBody(res *wantgo.CardInfo) *GetCardInfoResponseBody {
	body := &GetCardInfoResponseBody{
		CardAuthor:      res.CardAuthor,
		CardTitle:       res.CardTitle,
		CardDescription: res.CardDescription,
		ImageURL:        res.ImageURL,
		LocationAddress: res.LocationAddress,
		LocationURL:     res.LocationURL,
	}
	{
		var zero string
		if body.CardAuthor == zero {
			body.CardAuthor = "default"
		}
	}
	{
		var zero string
		if body.CardTitle == zero {
			body.CardTitle = "default"
		}
	}
	{
		var zero string
		if body.CardDescription == zero {
			body.CardDescription = "default"
		}
	}
	if res.Tags != nil {
		body.Tags = make([]string, len(res.Tags))
		for i, val := range res.Tags {
			body.Tags[i] = val
		}
	}
	{
		var zero string
		if body.ImageURL == zero {
			body.ImageURL = "default"
		}
	}
	{
		var zero string
		if body.LocationAddress == zero {
			body.LocationAddress = "default"
		}
	}
	{
		var zero string
		if body.LocationURL == zero {
			body.LocationURL = "default"
		}
	}
	return body
}

// NewGetSimpleCardListPayload builds a WantGo service getSimpleCardList
// endpoint payload.
func NewGetSimpleCardListPayload(authorization *string) *wantgo.GetSimpleCardListPayload {
	v := &wantgo.GetSimpleCardListPayload{}
	v.Authorization = authorization

	return v
}

// NewGetCardInfoPayload builds a WantGo service getCardInfo endpoint payload.
func NewGetCardInfoPayload(cardID string, authorization *string) *wantgo.GetCardInfoPayload {
	v := &wantgo.GetCardInfoPayload{}
	v.CardID = cardID
	v.Authorization = authorization

	return v
}

// NewPostCardInfoPayload builds a WantGo service postCardInfo endpoint payload.
func NewPostCardInfoPayload(body *PostCardInfoRequestBody, authorization *string) *wantgo.PostCardInfoPayload {
	v := &wantgo.PostCardInfoPayload{
		CardAuthor:      *body.CardAuthor,
		CardTitle:       *body.CardTitle,
		CardDescription: *body.CardDescription,
	}
	if body.ImageURL != nil {
		v.ImageURL = *body.ImageURL
	}
	if body.LocationAddress != nil {
		v.LocationAddress = *body.LocationAddress
	}
	if body.LocationURL != nil {
		v.LocationURL = *body.LocationURL
	}
	if body.Tags != nil {
		v.Tags = make([]string, len(body.Tags))
		for i, val := range body.Tags {
			v.Tags[i] = val
		}
	}
	if body.ImageURL == nil {
		v.ImageURL = "default"
	}
	if body.LocationAddress == nil {
		v.LocationAddress = "default"
	}
	if body.LocationURL == nil {
		v.LocationURL = "default"
	}
	v.Authorization = authorization

	return v
}

// NewPutCardInfoPayload builds a WantGo service putCardInfo endpoint payload.
func NewPutCardInfoPayload(body *PutCardInfoRequestBody, cardID string, authorization *string) *wantgo.PutCardInfoPayload {
	v := &wantgo.PutCardInfoPayload{
		CardAuthor:      *body.CardAuthor,
		CardTitle:       *body.CardTitle,
		CardDescription: *body.CardDescription,
	}
	if body.ImageURL != nil {
		v.ImageURL = *body.ImageURL
	}
	if body.LocationAddress != nil {
		v.LocationAddress = *body.LocationAddress
	}
	if body.LocationURL != nil {
		v.LocationURL = *body.LocationURL
	}
	if body.Tags != nil {
		v.Tags = make([]string, len(body.Tags))
		for i, val := range body.Tags {
			v.Tags[i] = val
		}
	}
	if body.ImageURL == nil {
		v.ImageURL = "default"
	}
	if body.LocationAddress == nil {
		v.LocationAddress = "default"
	}
	if body.LocationURL == nil {
		v.LocationURL = "default"
	}
	v.CardID = cardID
	v.Authorization = authorization

	return v
}

// NewDeleteCardInfoPayload builds a WantGo service deleteCardInfo endpoint
// payload.
func NewDeleteCardInfoPayload(cardID int, authorization *string) *wantgo.DeleteCardInfoPayload {
	v := &wantgo.DeleteCardInfoPayload{}
	v.CardID = cardID
	v.Authorization = authorization

	return v
}

// ValidatePostCardInfoRequestBody runs the validations defined on
// PostCardInfoRequestBody
func ValidatePostCardInfoRequestBody(body *PostCardInfoRequestBody) (err error) {
	if body.CardAuthor == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("cardAuthor", "body"))
	}
	if body.CardTitle == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("cardTitle", "body"))
	}
	if body.CardDescription == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("cardDescription", "body"))
	}
	return
}

// ValidatePutCardInfoRequestBody runs the validations defined on
// PutCardInfoRequestBody
func ValidatePutCardInfoRequestBody(body *PutCardInfoRequestBody) (err error) {
	if body.CardAuthor == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("cardAuthor", "body"))
	}
	if body.CardTitle == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("cardTitle", "body"))
	}
	if body.CardDescription == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("cardDescription", "body"))
	}
	return
}
